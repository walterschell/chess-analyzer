<!DOCTYPE html>
<html>
<head>
    <!--Note that the template delimiters are brackets, not braces to avoid conflicting with Vue.js-->
    <title>[[.Title]]</title>
    <link rel="stylesheet" href="static/chessboard-1.0.0.min.css">
    <link rel="stylesheet" href="static/main.css">
    <script src="static/jquery-3.7.1.min.js"></script>
    <script src="static/chessboard-1.0.0.min.js"></script>
    <script type="module">
        import { Chess } from './static/chess.js';
        window.Chess = Chess;
        // Initialize the game after the module is loaded
        window.initializeGame();
    </script>
    <script src="static/vue.global.js"></script>
    <script src="static/ws.js"></script>
    <script src="static/chart.min.js"></script>
    <script src="static/chartjs-plugin-annotation.min.js"></script>
    <style>
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .chess-container {
            display: flex;
            gap: 20px;
        }
        .board-container {
            flex: 0 0 400px;
        }
        .controls {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        .pgn-input {
            width: 100%;
            height: 150px;
            margin-bottom: 10px;
        }
        .move-controls {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
        }
        .analysis {
            border: 1px solid #ccc;
            padding: 10px;
            height: 200px;
            overflow-y: auto;
        }
        /* Square highlighting */
        .highlight-square {
            box-shadow: inset 0 0 3px 3px yellow !important;
            background-color: rgba(255, 255, 0, 0.3) !important;
        }
        .highlight-source-square {
            box-shadow: inset 0 0 3px 3px #42b983 !important;
            background-color: rgba(66, 185, 131, 0.3) !important;
        }
        .highlight-target-square {
            box-shadow: inset 0 0 3px 3px #ff6b6b !important;
            background-color: rgba(255, 107, 107, 0.3) !important;
        }
        /* Best move highlighting */
        .highlight-best-move {
            background-color: rgba(66, 185, 131, 0.5) !important; /* More opaque green */
            box-shadow: inset 0 0 3px 3px #42b983 !important;
        }
        .connection-status {
            position: fixed;
            top: 10px;
            right: 10px;
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
        }
        .connection-status.connected {
            background-color: #42b983;
            color: white;
        }
        .connection-status.disconnected {
            background-color: #ff6b6b;
            color: white;
        }
        .stockfish-status {
            position: fixed;
            top: 10px;
            right: 150px;
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 14px;
            transition: all 0.3s ease;
        }
        .stockfish-status.initializing {
            background-color: #ffd700;
            color: #000;
        }
        .stockfish-status.ready {
            background-color: #42b983;
            color: white;
        }
        button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }
        .graph-container {
            margin-top: 20px;
            width: 100%;
            height: 200px;
        }
        .current-move {
            font-weight: bold;
            color: #333;
            margin-bottom: 4px;
        }
        
        .best-move {
            color: #666;
            font-size: 0.9em;
            margin-left: 16px;
            border-left: 2px solid #ccc;
            padding-left: 8px;
        }
        
        .move-item {
            padding: 8px;
            border-bottom: 1px solid #eee;
        }
        
        .move-item.current {
            background-color: #f5f5f5;
        }
        
        .move-item .current-move {
            margin-bottom: 2px;
        }
        
        .move-item .best-move {
            margin-bottom: 0;
        }
    </style>
</head>
<body>
    <div id="connectionStatus" class="connection-status disconnected">Disconnected</div>
    <div class="stockfish-status">Stockfish: Initializing...</div>
    <div class="container">
        <h1>Chess Game Analyzer</h1>
        
        <!-- Add SVG definitions at document level -->
        <svg style="position: absolute; width: 0; height: 0;" width="0" height="0" version="1.1">
            <defs>
                <marker id="arrowhead-ff0000" viewBox="0 0 12 12" refX="6" refY="6"
                    markerWidth="4" markerHeight="4" orient="auto-start-reverse">
                    <path d="M 0 0 L 12 6 L 0 12 z" fill="#ff0000"/>
                </marker>
                <marker id="arrowhead-ffd700" viewBox="0 0 12 12" refX="6" refY="6"
                    markerWidth="4" markerHeight="4" orient="auto-start-reverse">
                    <path d="M 0 0 L 12 6 L 0 12 z" fill="#ffd700"/>
                </marker>
                <marker id="arrowhead-42b983" viewBox="0 0 12 12" refX="6" refY="6"
                    markerWidth="4" markerHeight="4" orient="auto-start-reverse">
                    <path d="M 0 0 L 12 6 L 0 12 z" fill="#42b983"/>
                </marker>
                <marker id="arrowhead-3498db" viewBox="0 0 12 12" refX="6" refY="6"
                    markerWidth="4" markerHeight="4" orient="auto-start-reverse">
                    <path d="M 0 0 L 12 6 L 0 12 z" fill="#3498db"/>
                </marker>
                <marker id="arrowhead-90EE90" viewBox="0 0 12 12" refX="6" refY="6"
                    markerWidth="4" markerHeight="4" orient="auto-start-reverse">
                    <path d="M 0 0 L 12 6 L 0 12 z" fill="#90EE90"/>
                </marker>
            </defs>
        </svg>

        <div class="config-section">
            <label for="analysisDepth">Analysis Depth:</label>
            <input type="number" id="analysisDepth" min="1" max="30" value="5" style="width: 60px;">
        </div>

        <div class="button-group">
            <button onclick="loadPGN()">Load Game</button>
            <button onclick="loadDemoGame()">Load Demo Game</button>
        </div>

        <div class="chess-container">
            <div class="board-container">
                <div id="board"></div>
                <div class="graph-container">
                    <canvas id="evaluationGraph"></canvas>
                </div>
            </div>
            
            <div class="controls">
                <textarea id="pgnInput" class="pgn-input" placeholder="Paste your PGN here..."></textarea>
                <div id="pgnWarning" style="color: #ff6b6b; margin-bottom: 10px; display: none;"></div>
                <div class="button-group" style="display: flex; gap: 10px;">
                    <button onclick="moveFirst()">⏮</button>
                    <button onclick="movePrev()">◀</button>
                    <button onclick="moveNext()">▶</button>
                    <button onclick="moveLast()">⏭</button>
                </div>
                
                <div>Current Move: <span id="currentMove">-</span></div>
                <div id="move-display" class="move-display"></div>
                
                <div class="analysis" id="analysisOutput">
                    <div v-for="item in analysisItems" :key="item.id">
                        {{item.txt}}<br>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        var board = null;
        var game = null;
        var currentMoveIndex = -1;
        var moves = [];
        var $board = $('#board');
        var moveAnalysis = new Map(); // Store analysis results for each move
        
        // Initialize game function that will be called after the module is loaded
        window.initializeGame = function() {
            game = new Chess();
            // Initialize the chessboard
            board = Chessboard('board', {
                position: 'start',
                pieceTheme: '/static/pieces/{piece}.png',
                moveSpeed: 200, // Animation speed in milliseconds
                snapSpeed: 100, // How quickly pieces snap to position
                snapbackSpeed: 250, // Speed of piece snapback for illegal moves
                appearSpeed: 200 // How quickly pieces appear on the board
            });
        };
        
        // Arrow drawing functions
        function drawArrow(from, to, color) {
            const boardContainer = document.querySelector('.board-container');
            const boardElement = document.querySelector('#board');
            if (!boardElement || !boardContainer) return;

            // Create SVG container if it doesn't exist
            let svg = boardContainer.querySelector('.arrows-svg');
            if (!svg) {
                svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
                svg.setAttribute("class", "arrows-svg");
                
                // Get the board's position and size
                const boardRect = boardElement.getBoundingClientRect();
                const containerRect = boardContainer.getBoundingClientRect();
                
                // Position SVG exactly over the board
                svg.style.position = "absolute";
                svg.style.top = boardRect.top + "px";
                svg.style.left = boardRect.left + "px";
                svg.style.width = boardRect.width + "px";
                svg.style.height = boardRect.height + "px";
                svg.style.pointerEvents = "none";
                svg.style.zIndex = "1000";
                boardContainer.appendChild(svg);
            }

            // Get the actual squares to calculate positions
            const fromSquare = boardElement.querySelector('.square-' + from);
            const toSquare = boardElement.querySelector('.square-' + to);
            
            if (!fromSquare || !toSquare) return;

            // Get the board dimensions
            const boardRect = boardElement.getBoundingClientRect();
            const squareSize = boardRect.width / 8;

            // Get square positions relative to the board
            const fromRect = fromSquare.getBoundingClientRect();
            const toRect = toSquare.getBoundingClientRect();

            // Calculate positions relative to the board
            const startX = fromRect.left - boardRect.left + fromRect.width / 2;
            const startY = fromRect.top - boardRect.top + fromRect.height / 2;
            const endX = toRect.left - boardRect.left + toRect.width / 2;
            const endY = toRect.top - boardRect.top + toRect.height / 2;

            // Set viewBox to match the board's dimensions
            svg.setAttribute("viewBox", `0 0 ${boardRect.width} ${boardRect.height}`);

            // Calculate arrow shaft length
            const dx = endX - startX;
            const dy = endY - startY;
            const length = Math.sqrt(dx * dx + dy * dy);
            
            // Adjust start and end points to not overlap pieces
            const scale = 0.2; // How much to shorten the arrow
            const shortenBy = squareSize * scale;
            const ratio = shortenBy / length;
            
            // Adjust points to start and end near the edge of the squares
            const adjustedStartX = startX + dx * ratio;
            const adjustedStartY = startY + dy * ratio;
            const adjustedEndX = endX - dx * ratio;
            const adjustedEndY = endY - dy * ratio;

            // Create arrow line
            const arrow = document.createElementNS("http://www.w3.org/2000/svg", "line");
            arrow.setAttribute("class", "move-arrow");
            arrow.setAttribute("x1", adjustedStartX);
            arrow.setAttribute("y1", adjustedStartY);
            arrow.setAttribute("x2", adjustedEndX);
            arrow.setAttribute("y2", adjustedEndY);
            arrow.setAttribute("stroke", color);
            arrow.setAttribute("stroke-width", squareSize / 10);
            arrow.setAttribute("marker-end", "url(#arrowhead-" + color.replace('#', '') + ")");

            svg.appendChild(arrow);
        }
        
        function clearArrows() {
            const svg = document.querySelector('.arrows-svg');
            if (svg) {
                while (svg.lastChild) {
                    svg.removeChild(svg.lastChild);
                }
            }
        }
        
        function getArrowColor(classification) {
            switch (classification) {
                case 'Blunder':
                    return '#ff0000';  // Red
                case 'Questionable':
                    return '#ffd700';  // Yellow
                case 'Good':
                case 'Excellent':
                case 'Winning':
                    return '#42b983';  // Green
                default:
                    return '#3498db';  // Blue for neutral
            }
        }
        
        var app = Vue.createApp({
            data() {
                return {
                    analysisItems: []
                }
            }
        });
        var analysisApp = app.mount('#analysisOutput');

        // The annotation plugin is registered automatically

        var evaluationData = {
            labels: ['Start'],
            datasets: [{
                label: 'Position Evaluation (pawns)',
                data: [0],
                borderColor: '#42b983',
                tension: 0.4,
                fill: false
            }]
        };
        
        var evaluationChart = new Chart(
            document.getElementById('evaluationGraph'),
            {
                type: 'line',
                data: evaluationData,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            title: {
                                display: true,
                                text: 'Evaluation (pawns)'
                            },
                            grid: {
                                color: function(context) {
                                    if (context.tick.value === 0) {
                                        return '#666';  // Darker line for zero
                                    }
                                    return '#ddd';     // Lighter lines for others
                                }
                            },
                            afterDataLimits: (scale) => {
                                const absMax = Math.max(Math.abs(scale.max), Math.abs(scale.min));
                                const range = Math.max(absMax, 4); // Ensure at least ±4 pawns range
                                scale.min = -range;
                                scale.max = range;
                            }
                        },
                        x: {
                            display: false,  // Hide x-axis labels
                            min: 0,          // Start from 0
                            max: 100         // Default max, will be updated when loading game
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `Evaluation: ${context.parsed.y} pawns`;
                                }
                            }
                        },
                        annotation: {
                            annotations: {
                                currentMove: {
                                    type: 'line',
                                    xMin: 0,
                                    xMax: 0,
                                    borderColor: '#ff6b6b',
                                    borderWidth: 2,
                                    drawTime: 'afterDatasetsDraw'
                                }
                            }
                        }
                    }
                }
            }
        );

        // Remove previous highlights and arrows
        function removeHighlights() {
            // Remove all highlight classes from all squares
            $board.find('[class^="square-"]').removeClass('highlight-square highlight-source-square highlight-target-square highlight-best-move');
            clearArrows();
        }

        // Update move visualization
        function updateMoveDisplay() {
            const moveObj = moveAnalysis.get(currentMoveIndex);
            if (moveObj) {
                const moveText = `Move ${moveObj.moveNumber}. ${moveObj.color} (${moveObj.moveText}): Score: ${moveObj.score.toFixed(2)}`;
                const bestMoveText = moveObj.bestMoveSAN ? `Best: ${moveObj.bestMoveSAN} (Score: ${moveObj.bestMoveScore.toFixed(2)})` : '';
                
                // Update the move display with both lines
                const moveDisplay = document.getElementById('move-display');
                if (moveDisplay) {
                    moveDisplay.innerHTML = `
                        <div class="current-move">${moveText}</div>
                        ${bestMoveText ? `<div class="best-move">${bestMoveText}</div>` : ''}
                    `;
                }
                
                // Update the current move line position
                evaluationChart.options.plugins.annotation.annotations.currentMove.xMin = currentMoveIndex + 1;
                evaluationChart.options.plugins.annotation.annotations.currentMove.xMax = currentMoveIndex + 1;
                evaluationChart.update('none');
                
                // Update the board position
                const position = game.history({ verbose: true });
                board.position(position);
                
                // Remove previous highlights and arrows
                removeHighlights();
                
                // Draw arrows for the current move and best move
                if (position.length > 0) {
                    const lastMove = position[position.length - 1];
                    const sourceSquare = lastMove.from;
                    const targetSquare = lastMove.to;
                    
                    // Draw arrow for the current move with color based on classification
                    const arrowColor = getArrowColor(moveObj.classification);
                    drawArrow(sourceSquare, targetSquare, arrowColor);
                    
                    // Highlight best move squares if available
                    if (moveObj.bestMoveSAN) {
                        const bestMove = moveObj.bestMove;
                        const bestSourceSquare = bestMove.substring(0, 2);
                        const bestTargetSquare = bestMove.substring(2, 4);
                        
                        // Highlight best move squares
                        $(`#board .square-${bestSourceSquare}`).addClass('highlight-best-move');
                        $(`#board .square-${bestTargetSquare}`).addClass('highlight-best-move');
                    }
                }
            }
        }

        // WebSocket message handlers
        addMessageHandler('analysis', function(data) {
            try {
                const analysis = JSON.parse(data.text);
                console.log('Analysis:', analysis);
                const moveText = `Move ${analysis.moveNumber}. ${analysis.color} (${analysis.moveText}): Score: ${analysis.score.toFixed(2)}`;
                const bestMoveText = analysis.bestMoveSAN ? `Best: ${analysis.bestMoveSAN} (Score: ${analysis.bestMoveScore.toFixed(2)})` : '';
                
                // Store analysis for the move
                const moveIndex = (analysis.moveNumber - 1) * 2 + (analysis.color === 'Black' ? 1 : 0);
                moveAnalysis.set(moveIndex, analysis);
                
                analysisApp.analysisItems.push({
                    id: Date.now(),
                    txt: moveText,
                    bestMove: bestMoveText
                });
                
                // Update chart data
                const label = `${analysis.moveNumber}${analysis.color === 'White' ? '.' : '...'}`;
                evaluationData.labels.push(label);
                evaluationData.datasets[0].data.push(analysis.score);
                
                // Update y-axis scale if needed
                const maxAbsValue = Math.max(4, Math.abs(analysis.score));
                evaluationChart.options.scales.y.min = -maxAbsValue;
                evaluationChart.options.scales.y.max = maxAbsValue;
                
                evaluationChart.update('none');

                // Advance to this move if we're not already there
                if (currentMoveIndex < moveIndex) {
                    // Calculate how many moves to advance
                    const movesToAdvance = moveIndex - currentMoveIndex;
                    for (let i = 0; i < movesToAdvance; i++) {
                        moveNext();
                    }
                }

                // If this is the last move, wait a moment then reset
                if (moveIndex === moves.length - 1) {
                    setTimeout(() => {
                        moveFirst();
                    }, 1000);
                }
            } catch (error) {
                console.error('Error processing analysis:', error);
            }
        });

        addMessageHandler('stockfish_status', function(data) {
            const status = document.querySelector('.stockfish-status');
            if (data.text === 'true') {
                status.textContent = 'Stockfish: Ready';
                status.classList.remove('initializing');
                status.classList.add('ready');
            } else {
                status.textContent = 'Stockfish: Initializing...';
                status.classList.remove('ready');
                status.classList.add('initializing');
            }
        });

        // Update connection status
        function updateConnectionStatus(connected) {
            const status = document.getElementById('connectionStatus');
            status.textContent = connected ? 'Connected' : 'Disconnected';
            status.classList.toggle('connected', connected);
            status.classList.toggle('disconnected', !connected);
        }

        function showWarning(message) {
            const warning = document.getElementById('pgnWarning');
            warning.textContent = message;
            warning.style.display = 'block';
            setTimeout(() => {
                warning.style.display = 'none';
            }, 5000); // Hide warning after 5 seconds
        }

        function loadDemoGame() {
            fetch('/static/demo_game.pgn')
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    console.log('Demo game response headers:', {
                        type: response.headers.get('content-type'),
                        length: response.headers.get('content-length')
                    });
                    return response.blob();
                })
                .then(blob => {
                    return blob.text();
                })
                .then(pgn => {
                    console.log('Loaded demo game PGN:', pgn);
                    if (!pgn) {
                        throw new Error('Empty PGN file');
                    }
                    document.getElementById('pgnInput').value = pgn;
                    loadPGN();
                })
                .catch(error => {
                    console.error('Error loading demo game:', error);
                    alert('Error loading demo game: ' + error.message);
                });
        }

        function loadPGN() {
            const pgn = document.getElementById('pgnInput').value.trim();
            if (!pgn) {
                showWarning('Please enter a PGN game');
                return;
            }

            const tempGame = new Chess();
            
            try {
                // First try loading the PGN exactly as provided
                console.log('Attempting to load PGN as-is:', pgn);
                tempGame.loadPgn(pgn);
                
                // If we get here, the PGN was loaded successfully
                console.log('Successfully loaded PGN as-is');
                
                // Get the move history with verbose information
                moves = tempGame.history({ verbose: true });
                
                if (moves.length === 0) {
                    throw new Error('No valid moves found in PGN');
                }
                
                // Update the main game instance and UI
                game = tempGame;
                currentMoveIndex = -1;
                board.position('start');
                removeHighlights();
                
                // Reset the evaluation chart with fixed x-axis range
                evaluationData.labels = ['Start'];
                evaluationData.datasets[0].data = [0];
                evaluationChart.options.scales.x.max = moves.length;
                evaluationChart.options.plugins.annotation.annotations.currentMove.xMin = 0;
                evaluationChart.options.plugins.annotation.annotations.currentMove.xMax = 0;
                evaluationChart.update('none');
                
                // Clear previous analysis
                analysisApp.analysisItems = [];
                moveAnalysis.clear();
                
                // Start analysis asynchronously
                setTimeout(() => {
                    sendMessage({
                        type: 'analyze',
                        pgn: pgn
                    });
                }, 100);
                
                console.log('PGN processed:', {
                    moves: moves.length,
                    finalPosition: game.fen(),
                    history: game.history()
                });
            } catch (e) {
                console.log('Failed to load PGN as-is, trying cleanup:', e);
                try {
                    // Try with basic cleanup (just normalize line endings)
                    const basicCleanPGN = pgn.replace(/\r\n/g, '\n');
                    console.log('Attempting to load PGN with basic cleanup:', basicCleanPGN);
                    tempGame.loadPgn(basicCleanPGN);
                    
                    // If we get here, the PGN was loaded successfully
                    console.log('Successfully loaded PGN with basic cleanup');
                    moves = tempGame.history({ verbose: true });
                    
                    if (moves.length === 0) {
                        throw new Error('No valid moves found in PGN');
                    }
                    
                    // Update the main game instance and UI
                    game = tempGame;
                    currentMoveIndex = -1;
                    board.position('start');
                    removeHighlights();
                    
                    // Reset the evaluation chart
                    evaluationData.labels = ['Start'];
                    evaluationData.datasets[0].data = [0];
                    evaluationChart.update();
                    
                    // Clear previous analysis
                    analysisApp.analysisItems = [];
                    
                    // Start analysis asynchronously
                    setTimeout(() => {
                        sendMessage({
                            type: 'analyze',
                            pgn: pgn
                        });
                    }, 100);
                } catch (e2) {
                    console.log('Failed to load PGN with basic cleanup, trying full cleanup:', e2);
                    try {
                        // Try with more aggressive cleanup
                        const cleanPGN = basicCleanPGN
                            .replace(/\n{3,}/g, '\n\n')  // Replace 3+ newlines with 2
                            .replace(/\s+$/gm, '')       // Remove trailing whitespace from each line
                            .split('\n')
                            .map(line => line.trim())
                            .join('\n')
                            .trim();
                        
                        console.log('Attempting to load PGN with full cleanup:', cleanPGN);
                        tempGame.loadPgn(cleanPGN);
                        
                        // If we get here, the PGN was loaded successfully
                        console.log('Successfully loaded PGN with full cleanup');
                        moves = tempGame.history({ verbose: true });
                        
                        if (moves.length === 0) {
                            throw new Error('No valid moves found in PGN');
                        }
                        
                        // Update the main game instance and UI
                        game = tempGame;
                        currentMoveIndex = -1;
                        board.position('start');
                        removeHighlights();
                        
                        // Reset the evaluation chart
                        evaluationData.labels = ['Start'];
                        evaluationData.datasets[0].data = [0];
                        evaluationChart.update();
                        
                        // Clear previous analysis
                        analysisApp.analysisItems = [];
                        
                        // Start analysis asynchronously
                        setTimeout(() => {
                            sendMessage({
                                type: 'analyze',
                                pgn: pgn
                            });
                        }, 100);
                    } catch (e3) {
                        console.log('Failed to load PGN with full cleanup, trying moves only:', e3);
                        try {
                            // Last resort: try without headers but preserve the blank line
                            const movesOnly = cleanPGN
                                .split('\n')
                                .map((line, index, array) => {
                                    // Keep the blank line after headers
                                    if (line.startsWith('[') && array[index + 1] === '') {
                                        return line + '\n';
                                    }
                                    // Skip headers and empty lines
                                    if (line.startsWith('[') || line === '') {
                                        return '';
                                    }
                                    return line;
                                })
                                .filter(line => line !== '')
                                .join(' ')
                                .trim();
                            
                            console.log('Attempting to load PGN with moves only:', movesOnly);
                            tempGame.loadPgn(movesOnly);
                            
                            // If we get here, the PGN was loaded successfully
                            console.log('Successfully loaded PGN with moves only');
                            moves = tempGame.history({ verbose: true });
                            
                            if (moves.length === 0) {
                                throw new Error('No valid moves found in PGN');
                            }
                            
                            // Update the main game instance and UI
                            game = tempGame;
                            currentMoveIndex = -1;
                            board.position('start');
                            removeHighlights();
                            
                            // Reset the evaluation chart
                            evaluationData.labels = ['Start'];
                            evaluationData.datasets[0].data = [0];
                            evaluationChart.update();
                            
                            // Clear previous analysis
                            analysisApp.analysisItems = [];
                            
                            // Start analysis asynchronously
                            setTimeout(() => {
                                sendMessage({
                                    type: 'analyze',
                                    pgn: pgn
                                });
                            }, 100);
                        } catch (e4) {
                            console.error('All PGN loading attempts failed:', e4);
                            showWarning('Warning: Invalid PGN format or no valid moves found');
                            // Reset to a new game to prevent hanging
                            game = new Chess();
                            moves = [];
                            currentMoveIndex = -1;
                            board.position('start');
                            removeHighlights();
                            updateCurrentMove();
                        }
                    }
                }
            }
        }

        // Update move navigation functions
        function moveFirst() {
            if (currentMoveIndex === -1) return;
            
            try {
                // Clear highlights before resetting
                removeHighlights();
                
                game = new Chess();
                currentMoveIndex = -1;
                board.position(game.fen(), true);
                
                // Update highlights after the move
                updateMoveDisplay();
                updateCurrentMove();
                
                console.log('Reset to initial position');
            } catch (e) {
                console.error('Error resetting position:', e);
            }
        }

        function movePrev() {
            if (currentMoveIndex < 0) return;
            
            try {
                // Clear highlights before undoing the move
                removeHighlights();
                
                game.undo();
                currentMoveIndex--;
                board.position(game.fen(), true);
                
                // Update highlights after the move
                updateMoveDisplay();
                updateCurrentMove();
                
                console.log('Move undone:', {
                    fen: game.fen(),
                    index: currentMoveIndex
                });
            } catch (e) {
                console.error('Error undoing move:', e);
                currentMoveIndex++;
            }
        }

        function moveNext() {
            if (currentMoveIndex + 1 >= moves.length) return;
            
            try {
                // Clear highlights before making the move
                removeHighlights();
                
                currentMoveIndex++;
                const move = moves[currentMoveIndex];
                try {
                    game.move(move.san); // Use SAN notation instead of the move object
                } catch (e) {
                    console.error('Error making move:', e);
                    console.error('From:', game.fen());
                    console.error('Move:', move);
                    currentMoveIndex--;
                    return;
                }
                board.position(game.fen(), true);
                
                // Update highlights after the move
                updateMoveDisplay();
                updateCurrentMove();
                
                console.log('Move made:', {
                    move: move,
                    fen: game.fen(),
                    index: currentMoveIndex
                });
            } catch (e) {
                console.error('Error making move:', e);
                currentMoveIndex--;
            }
        }

        function moveLast() {
            try {
                // Process moves in batches to keep UI responsive
                const BATCH_SIZE = 1; // Reduced batch size for smoother animation
                const MOVE_DELAY = 300; // Delay between moves in milliseconds
                
                function processBatch() {
                    let processed = 0;
                    while (processed < BATCH_SIZE && currentMoveIndex + 1 < moves.length) {
                        moveNext();
                        processed++;
                    }
                    
                    // If there are more moves to process, schedule next batch with delay
                    if (currentMoveIndex + 1 < moves.length) {
                        setTimeout(() => requestAnimationFrame(processBatch), MOVE_DELAY);
                    }
                }
                
                // Start processing moves
                requestAnimationFrame(processBatch);
            } catch (e) {
                console.error('Error moving to last position:', e);
            }
        }

        function updateCurrentMove() {
            const span = document.getElementById('currentMove');
            if (currentMoveIndex === -1) {
                span.textContent = 'Start';
                // Update chart annotation for start position
                evaluationChart.options.plugins.annotation.annotations.currentMove.xMin = 0;
                evaluationChart.options.plugins.annotation.annotations.currentMove.xMax = 0;
            } else {
                const move = moves[currentMoveIndex];
                const moveNum = Math.floor(currentMoveIndex / 2) + 1;
                const color = currentMoveIndex % 2 === 0 ? 'White' : 'Black';
                span.textContent = `${moveNum}. ${color} (${move.san})`;
                // Update chart annotation for current move
                evaluationChart.options.plugins.annotation.annotations.currentMove.xMin = currentMoveIndex + 1;
                evaluationChart.options.plugins.annotation.annotations.currentMove.xMax = currentMoveIndex + 1;
            }
            evaluationChart.update('none');
        }

        function sendMessage(msg) {
            if (ws && ws.readyState === WebSocket.OPEN) {
                if (msg.type === 'analyze') {
                    // Add analysis depth to the message
                    msg.depth = parseInt(document.getElementById('analysisDepth').value) || 5;
                    game = new Chess();
                    currentMoveIndex = -1;
                    board.position('start');
                    removeHighlights();
                }
                ws.send(JSON.stringify(msg));
            }
        }
    </script>
</body>
</html>